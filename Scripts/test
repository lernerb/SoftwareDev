#!/usr/bin/perl                                                                                                          

if ($#ARGV < 0) {
  error("Usage: ./test <problem>");
}

foreach $problem (@ARGV) {

  if (! (-e $problem)) {
    error("Unable to find problem '$problem'.");
  }

  if (! (-e "./solutions/$problem")) {
    error("Unable to find reference solution to problem '$problem'.");
  }

  if ($problem eq "assignment4") {
    my @tries = ("-p /course/cs4500wc/Assignments/A4/Patterns/black.jpg -s /course/cs4500wc/Assignments/A4/Sources/bb0001.jpg",
 		 "-p /course/cs4500wc/Assignments/A4/Patterns/black.jpg -s /course/cs4500wc/Assignments/A4/Sources/hh0021.jpg",
                 "-p /course/cs4500wc/Assignments/A4/Patterns/cliff.png -s /course/cs4500wc/Assignments/A4/Sources/an0300.jpg",
                 "-p /course/cs4500wc/Assignments/A4/Patterns/flower.gif -s /course/cs4500wc/Assignments/A4/Sources/ac1000.jpg");

    test($problem, \@tries);
  } else {
    error("Unknown problem '$problem'.");
  }
}

sub test {
  my ($problem, $vals) = @_;

  print "Testing $problem\n";

  foreach $val (@{ $vals }) {
    my $test = `./$problem $val`;
    my $real = `./solutions/$problem $val`;

    print pad("  Trying with './spims $val'", 80);

    #TODO: This won't work until we create our initial prototype, as well as a solution 'spins' prototype 
    #system("./spims $val > .actual 2>&1");
    #system("./solutions/$problem $val > .expected 2>&1");
    #my $diff = `diff .expected .actual | egrep "^([<>]|Binary)"`;
    #`rm .actual .expected`;


    if ($test eq $real) {
      print "[PASS]\n";
    } else {
      print "[FAIL]\n";
      print "    Expected output:\n$real\n    Received output:\n$test\n";
      exit(-1);
    }
  }
}

sub error {
  my ($msg) = @_;
  print "ERROR: $msg\n";
  exit(1);
}

sub pad {
  my ($name, $len) = @_;
  while (length($name) < $len) {
    $name = "$name ";
  }
  if (length($name) > $len) {
    $name = substr($name, 0, $len-3) . "...";
  }
  return $name;
}
