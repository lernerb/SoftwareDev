#!/usr/bin/env python

import sys, getopt
from PIL import Image
from PIL import ImageChops
import datetime

def matchTemplate(searchImage, templateImage):
    minScore = -1000
    matching_xs = 0
    matching_ys = 0
    # convert images to "L" to reduce computation by factor 3 "RGB"->"L"
    searchImage = searchImage.convert(mode="L")
    templateImage = templateImage.convert(mode="L")
    searchWidth, searchHeight = searchImage.size
    templateWidth, templateHeight = templateImage.size
    # make a copy of templateImage and fill with color=1
    templateMask = Image.new(mode="L", size=templateImage.size, color=1)
    #loop over each pixel in the search image
    for xs in range(searchWidth-templateWidth+1):
        for ys in range(searchHeight-templateHeight+1):
            #for ys in range(10):
            #set some kind of score variable to "All equal"
            score = templateWidth*templateHeight
            # crop the part from searchImage
            searchCrop = searchImage.crop((xs,ys,xs+templateWidth,ys+templateHeight))
            diff = ImageChops.difference(templateImage, searchCrop)
            notequal = ImageChops.darker(diff,templateMask)
            countnotequal = sum(notequal.getdata())
            score -= countnotequal
            if minScore < score:
                minScore = score
                matching_xs = xs
                matching_ys = ys    
        
    print "Location=",(matching_xs, matching_ys), "Score=",minScore

def main(argv):
   patternImage = ''
   sourceImage = ''
   try:
      opts, args = getopt.getopt(argv,"p:s:")
   except getopt.GetoptError:
      print './spims -p <PatternImage> -s <SourceImage>'
      sys.exit(2)
   for opt, arg in opts:
      if opt == '-p':
         patternImage = arg
      elif opt == '-s':
         sourceImage = arg
   print 'Pattern Image is ', patternImage
   print 'Source image is ', sourceImage
   patternImage = Image.open(patternImage)
   sourceImage = Image.open(sourceImage)
   matchTemplate(patternImage, sourceImage)
   print "PROGRAM COMPLETE"

if __name__ == "__main__":
   main(sys.argv[1:])
