#!/usr/bin/env python

import sys
import getopt
import imghdr
import optparse
from PIL import Image, ImageChops

def matchTemplate(patternArg, sourceArg):
    """
    Attempts to find the pattern image in the source image.

    Arguments:
    patternArg -- The path to the pattern image
    sourceArg -- The path to the source image

    Returns -1 if an error occurs, otherwise returns 0.
    
    """

    # Renamed Template to Pattern and Search to Source
    sourceName = sourceArg.rpartition('/')[2]
    sourceImage = Image.open(sourceArg)
    patternName = patternArg.rpartition('/')[2]
    patternImage = Image.open(patternArg)

    minScore = -1000
    matching_xs = 0
    matching_ys = 0

    sourceImage = sourceImage.convert(mode="L")
    sourceWidth, sourceHeight = sourceImage.size
    patternImage = patternImage.convert(mode="L")
    patternWidth, patternHeight = patternImage.size
    patternMask = Image.new(mode="L", size=patternImage.size, color=1)
    
    for xs in range(sourceWidth-patternWidth+1):
        for ys in range(sourceHeight-patternHeight+1):
            score = patternWidth*patternHeight
            sourceCrop = sourceImage.crop((xs,ys,xs+patternWidth,ys+patternHeight))
            diff = ImageChops.difference(patternImage, sourceCrop)
            notequal = ImageChops.darker(diff,patternMask)
            countnotequal = sum(notequal.getdata())
            score -= countnotequal

            if minScore < score:
                minScore = score
                matching_xs = xs
                matching_ys = ys

    #TODO: Figure out what number to put here
    if minScore > (patternWidth * patternHeight * .03):    
         print "%s matches %s at %ix%i+%i+%i" % (patternName, sourceName, patternWidth, patternHeight, matching_xs, matching_ys)
    
    # Function completed sucessfully    
    return 0

def printError(error, testerFlag):
    """
    Prints errors after appending 'Error: ' to the front of them.

    Arguments:
    error -- The error string to be printed
    testerFlag -- True if SPIMS is being run by the tester

    Errors are normally printed to standard error, but if SPIMS is 
    being run by the tester they are printed to standard out.

    """

    if testerFlag:
        print 'Error: ' + error
    else:
        print >> sys.stderr, 'Error: ' + error

def isInputValid(patternArg, sourceArg, testerFlag):
    """
    Determines whether or not the provided arguments are valid.

    Arguments:
    patternArg -- The path to the pattern Image
    sourceArg -- The path to the source Image
    testerFlag -- True if SPIMS is being run by the tester

    Returns True if the arguments are valid, otherwise returns False.

    """
    
    # Make sure both args were specified
    if not patternArg or not sourceArg:
        printError('Invalid Arguments. Must provide a pattern(-p) and source(-s) image!', testerFlag)
        return False

    # Make sure images exist and are of the correct type
    try:
        validTypes = ['gif', 'jpeg', 'png']
        sourceType = imghdr.what(sourceArg)
        patternType = imghdr.what(patternArg)

        if sourceType not in validTypes or patternType not in validTypes:
            printError('Provided images must be GIF, JPEG, or PNG!', testerFlag)
            return False

    except IOError as e:
        printError('Image files cannot be found!', testerFlag)
        return False

    # Arguments are valid
    return True

def main(argv):
    parser = optparse.OptionParser(description='Software Dev Image Matching Software')
    parser.add_option('-p', '--pattern', dest='pattern', help='The pattern or template image to be found')
    parser.add_option('-s', '--source', dest='source', help='The source image to search in')
    parser.add_option('-t', '--tester', dest='tester', help=optparse.SUPPRESS_HELP, action="store_true")
    (options, args) = parser.parse_args()

    if isInputValid(options.pattern, options.source, options.tester):
        return matchTemplate(options.pattern, options.source)   
   
    # Arguments were invalid 
    return -1

if __name__ == "__main__":
    main(sys.argv[1:])
