#!/usr/bin/env python

import sys
import imghdr
import cmath
import numpy as np
from numpy.linalg import norm
from scipy import signal, ndimage
from PIL import Image, ImageChops
from os import listdir
from os.path import isdir, join
from threading import Thread

def matchTemplate(patternImg, sourceImg, patternName, sourceName, foundMatches[]):
    """
    Attempts to find the pattern image in the source image.

    Arguments:
    patternImg -- The loaded pattern image
    sourceImg -- The loaded source image 
    patternName -- The path to pattern Image
    sourceName -- The path to source image

    Returns True if completed successfully AND match found, otherwise returns False.

    """

    # Convert Source Image into a numpy array grayscaled
    sourceArray = sourceImg
    numpySource = np.asarray(sourceArray)
    numpySource.flags.writeable = True
    numpySource = np.ascontiguousarray(numpySource, dtype=np.float32)

    # Convert Pattern Image into a numpy array grayscaled
    patternArray = patternImg
    numpyPattern = np.asarray(patternArray)
    numpyPattern.flags.writeable = True
    numpyPattern = np.ascontiguousarray(numpyPattern, dtype=np.float32)

    # Get the original sizes of both images for normalization
    sourceWidth, sourceHeight = sourceArray.size
    patternWidth, patternHeight = patternArray.size

    if (patternWidth <= 10 and patternHeight <= 10 and sourceWidth <= 10 and sourceHeight <= 10):
        matchSmallTemplate(patternImg, sourceImg, patternName, sourceName)
    else:
        # FFT using a Normalized Cross Correlation
        template_mean = np.mean(numpyPattern)
        numpyPattern -= template_mean
        corr = np.ascontiguousarray(signal.fftconvolve(numpySource, numpyPattern[::-1, ::-1], mode="valid"), 
                                    dtype=np.float32)
    
        corr = normalize(corr)

        # Find the max value and print it
        ij = np.unravel_index(corr.argmax(), corr.shape)
        m_xs, m_ys = ij[::-1]

        if isConfirmedMatch(m_xs, m_ys, sourceImg, patternImg) and not isOverlappingMatch(foundMatches,m_xs, m_ys, patternWidth, patternHeight):
            foundMatches.append(([m_xs, m_ys], patternWidth, patternHeight))
            print "%s matches %s at %ix%i+%i+%i" % (patternName, sourceName, patternWidth, patternHeight, m_xs, m_ys)
	    matchTemplate(patternImg, fillWithRandom(sourceImg,m_xs, m_ys, patternWidth+m_xs, patternHeight+m_ys), patternName, sourceName, foundMatches)

def isConfirmedMatch(xs, ys, sourceImage, patternImage):

    sourceWidth, sourceHeight = sourceImage.size
    patternWidth, patternHeight = patternImage.size
    patternMask = Image.new(mode="L", size=patternImage.size, color=1)

    if (xs > sourceWidth or ys > sourceHeight):
	return False
    
    score = patternWidth*patternHeight
    sourceCrop = sourceImage.crop((xs,ys,xs+patternWidth,ys+patternHeight))
    diff = ImageChops.difference(patternImage, sourceCrop)
    notequal = ImageChops.darker(diff,patternMask)
    countnotequal = sum(notequal.getdata())
    score -= countnotequal
    
    return score >= (patternWidth * patternHeight * 0.03)

def fillWithRandom(image, x1, y1, x2, y2):
    """
    Fills the given image from (x1,y1) to (x2, y2) with random data (looks like static)

    """
    
    imarray = np.random.rand(x2-x1,y2-y1,3) * 255
    im = Image.fromarray(imarray.astype('uint8')).convert('RGBA')
    image.paste(im, (x1, y1))
    return image      
     
def matchSmallTemplate(patternImage, sourceImage, patternName, sourceName):
    """
    Attempts to find the pattern image in the source image.
    
    Arguments:
    patternImg -- The loaded pattern image
    sourceImg -- The loaded source image 
    patternName -- The path to pattern Image
    sourceName -- The path to source image    

    """

    foundMatches = []

    sourceWidth, sourceHeight = sourceImage.size
    patternWidth, patternHeight = patternImage.size
    patternMask = Image.new(mode="L", size=patternImage.size, color=1)
    
    for xs in range(sourceWidth-patternWidth+1):
        for ys in range(sourceHeight-patternHeight+1):
            score = patternWidth*patternHeight
            sourceCrop = sourceImage.crop((xs,ys,xs+patternWidth,ys+patternHeight))
            diff = ImageChops.difference(patternImage, sourceCrop)
            notequal = ImageChops.darker(diff,patternMask)
            countnotequal = sum(notequal.getdata())
            score -= countnotequal

            if score >= (patternWidth * patternHeight * 0.03) and not isOverlappingMatch(foundMatches, xs, ys, patternWidth, patternHeight):    
                foundMatches.append(([xs, ys], patternWidth, patternHeight))
                print "%s matches %s at %ix%i+%i+%i" % (patternName, sourceName, patternWidth, patternHeight, xs, ys)

def isOverlappingMatch (matches, x, y, width, height):
    for match in matches:
        if (#top left
            (x >= match[0][0]          and x < match[0][0]+match[1]         and
             y >= match[0][1]          and y < match[0][1]+match[2]             ) or
            #top right
            (x + width >= match[0][0]  and x + width < match[0][0]+match[1] and
             y >= match[0][1]          and y < match[0][1]+match[2]             ) or
            #bottom left
            (x >= match[0][0]          and x < match[0][0]+match[1]         and
             y + height >= match[0][1] and y + height < match[0][1]+match[2]    ) or
            #bottom right
            (x + width >= match[0][0]  and x + width < match[0][0]+match[1] and
             y + height >= match[0][1] and y + height < match[0][1]+match[2]    )):
            return True
    return False
        
def normalize(array, imin = -1, imax = 1):
    """
    I = Imin + (Imax-Imin)*(D-Dmin)/(Dmax-Dmin)

    """

    dmin = array.min()
    dmax = array.max()
    array -= dmin;
    array *= (imax - imin)
    array /= (dmax-dmin)
    array += imin

    return array

def printError(error, testerFlag):
    """
    Prints errors after appending 'Error: ' to the front of them.

    Arguments:
    error -- The error string to be printed
    testerFlag -- True if SPIMS is being run by the tester

    Errors are normally printed to standard error, but if SPIMS is 
    being run by the tester they are printed to standard out.

    """

    if testerFlag:
        print 'Error: ' + error
    else:
        print >> sys.stderr, 'Error: ' + error

def isValidType(filePath, testerFlag):
    """
    Determines whether or not the provided path is a valid image.

    Arguments:
    filePath -- The path to the file we are checking
    testerFlag -- True if SPIMS is being run by the tester

    Returns True if the file is a valid image, otherwise returns False.

    """

    # Make sure images exist and are of the correct type
    try:
        if isdir(filePath):
            printError('Received directory while expecting file!', testerFlag)
            return False

        validTypes = ['gif', 'jpeg', 'png']
        fileType = imghdr.what(filePath)

        if fileType not in validTypes:
            printError('Provided images must be GIF, JPEG, or PNG!', testerFlag)
            return False

    except IOError as e:
        printError('Image file cannot be found!', testerFlag)
        return False

    # Image is valid
    return True

def allValidTypes(patterns, sources, testerFlag):
    """
    Determines whether or not the provided files are valid types.

    Arguments:
    patterns -- The list of pattern paths
    sources -- The list of source paths
    testerFlag -- True if SPIMS is being run by the tester

    Returns True if all the files are valid, otherwise returns False.

    """

    # Make sure all patterns are valid
    for pattern in patterns:
        if not isValidType(pattern, testerFlag):
            return False

    # Make sure all sources are valid
    for source in sources:
        if not isValidType(source, testerFlag):
            return False

    # All are valid
    return True

def validateArgs(patternArg, patternDirArg, sourceArg, sourceDirArg, testerFlag):
    """
    Validates the arguments.

    Arguments:
    patternArg -- The path to the pattern image
    patternDirArg -- The path to the directory of pattern images
    sourceArg -- The path to the source image
    sourceDirArg -- The path to the directory of source images
    testerFlag -- True if SPIMS is being run by the tester

    Returns False if any arguments are invalid, otherwise 
    returns a tuple containing a list of patterns and a list of sources

    """

    # Make sure a pattern image is given
    if not patternArg and not patternDirArg:
        printError('Invalid Arguments. No pattern images provided!', testerFlag)
        return False
 
    # Make sure a source image is given
    if not sourceArg and not sourceDirArg:
        printError('Invalid Arguments. No source images provided!', testerFlag)
        return False

    # Make sure only one pattern arg is given
    if patternArg and patternDirArg:
        printError('Invalid Arguments. Must only provide one pattern argument!', testerFlag)
        return False

    # Make sure only one source arg is given
    if sourceArg and sourceDirArg:
        printError('Invalid Arguments. Must only provide one source argument!', testerFlag)
        return False

    # Creating lists of all patterns and sources
    patterns = []
    sources = []

    # Add the existing arguments to the lists
    if patternArg:
        patterns.append(patternArg)
    
    if sourceArg:
        sources.append(sourceArg)

    if patternDirArg:
        if not isdir(patternDirArg):
            printError('Given pattern directory is invalid!', testerFlag)
            return False

        for patternName in listdir(patternDirArg):
            patterns.append(join(patternDirArg, patternName))

    if sourceDirArg:
        if not isdir(sourceDirArg):
            printError('Given source directory is invalid!', testerFlag)
            return False

        for sourceName in listdir(sourceDirArg):
            sources.append(join(sourceDirArg, sourceName))

    # Make sure all paths are valid files
    if allValidTypes(patterns, sources, testerFlag):
        return patterns, sources

    return False

def main(argv):
    patternArg = None
    patternDirArg = None
    sourceArg = None
    sourceDirArg = None
    testerFlag = '-t' in argv
    
    if '-p' in argv:
        i = argv.index('-p') + 1
        if len(argv) > i:
            patternArg = argv[i]

    if '-pdir' in argv:
        i = argv.index('-pdir') + 1
        if len(argv) > i:
            patternDirArg = argv[i]

    if '--pdir' in argv:
        i = argv.index('--pdir') + 1
        if len(argv) > i:
            patternDirArg = argv[i]

    if '-s' in argv:
        i = argv.index('-s') + 1
        if len(argv) > i:
            sourceArg = argv[i]

    if '-sdir' in argv:
        i = argv.index('-sdir') + 1
        if len(argv) > i:
            sourceDirArg = argv[i]

    if '--sdir' in argv:
        i = argv.index('--sdir') + 1
        if len(argv) > i:
            sourceDirArg = argv[i]

    # Validate the arguments and attempt to retrieve the pattern/source paths
    paths = validateArgs(patternArg, patternDirArg, sourceArg, sourceDirArg, testerFlag)

    if paths:
        # If path is not false, then it is a tuple of the patterns and sources
        patterns, sources = paths

        # Try to find matches between all combinations of patterns and sources
        for pattern in patterns:
            patternName = pattern.rpartition('/')[2]
            patternImg = Image.open(pattern).convert('L')
            for source in sources:            
                sourceName = source.rpartition('/')[2]
                sourceImg = Image.open(source).convert('L')

                try:
                    t = Thread(target=matchTemplate, args=(patternImg, sourceImg, patternName, sourceName))
                    t.start()
                except Exception, errtxt:
                    # Error occured while finding a match. Stop and exit.
                    printError(errtxt, testerFlag)
                    return -1
    else:
        # Arguments are invalid
        return -1 
   
    # Program completed successfully 
    return 1

if __name__ == "__main__":
    main(sys.argv[1:])

